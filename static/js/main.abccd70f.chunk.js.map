{"version":3,"sources":["v1/components/card/index.jsx","v1/components/board/index.jsx","v1/db/index.js","v1/App.jsx","serviceWorker.js","index.js"],"names":["Card","id","disabled","width","height","flipped","solution","type","handleClick","back","className","style","onClick","alt","src","Board","cards","map","card","key","includes","loadCards","array","_arr","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","App","useState","setCards","setFlipped","setDisabled","setSolution","score","setScore","wins","setWins","useEffect","preloadImages","checkScore","Image","noMatch","setTimeout","resetCards","sameCardClicked","isMatch","clickedCard","find","newGame","callback","newScore","updateScore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.abccd70f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./card.scss\";\n\nfunction Card({ id, disabled, width, height, flipped, solution, type, back, handleClick }) {\n  back = \"./assets/images/Wood-Pattern5.png\";\n  // front = \"./assets/images/Wood-Pattern6.png\";\n  return (\n    <div\n      className={`flip-container ${flipped ? \"flipped\" : \"\"}`}\n      style={{ width, height }}\n      onClick={() => disabled ? null : handleClick(id)}\n    >\n      <div className=\"flipper\">\n        <img\n          alt={type}\n          style={{ width, height }}\n          className={flipped ? \"front\" : \"back\"}\n          src={flipped || solution ? `./assets/images/${type}.png` : back}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  solution: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './board.scss';\nimport Card from '../card';\n\nfunction Board({ disabled, cards, flipped, solution, handleClick }) {\n  return (\n    <div className='board'>\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          id={card.id}\n          type={card.type}\n          width={100}\n          height={100}\n          flipped={flipped.includes(card.id)}\n          solution={solution.includes(card.id)}\n          handleClick={handleClick}\n          disabled={disabled || solution.includes(card.id)}\n          {...card}\n        />\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solution: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","function shuffle(array) {\n  const _arr = array.slice();\n  for (let i = 0; i < array.length - 1; i++) {\n    let randomIndex = Math.floor(Math.random() * (i + 1));\n    let temp = _arr[i];\n    _arr[i] = _arr[randomIndex];\n    _arr[randomIndex] = temp;\n  }\n  return _arr;\n}\n\nexport default function loadCards() {\n  let id = 0;\n\n  const cards = [\n    \"CD\",\n    \"Dish-Antenna\",\n    \"Laptop\",\n    \"Light-Bulb\",\n    \"Loud-Speaker\",\n    \"Table-Lamp\",\n    \"Touch\",\n    \"Keyboard\",\n    //    \"Refrigerator\",\n    //    \"Mixer-Grinder\",\n    //    \"Memory-Card\",\n    //    \"Night-Lamp\",\n    //    \"PBX\",\n    //    \"Tape-Recorder\",\n    //    \"Printer\",\n    //    \"Tools\",\n  ].reduce((acc, type) => {\n    acc.push({\n      id: id++,\n      type,\n    });\n    acc.push({\n      id: id++,\n      type,\n    });\n    return acc;\n  }, []);\n  return shuffle(cards);\n}\n","import React, { useState, useEffect } from 'react';\nimport Board from './components/board';\nimport loadCards from './db';\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [solution, setSolution] = useState([]);\n  const [score, setScore] = useState(0);\n  const [wins, setWins] = useState(0);\n\n  useEffect(() => {\n    setCards(loadCards());\n    preloadImages();\n  }, []);\n\n  useEffect(() => {\n    checkScore();\n  }, [score]);\n\n  const handleClick = (id) => {\n    setDisabled(true);\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) {\n        return;\n      }\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolution([...solution, flipped[0], id]);\n        resetCards();\n        updateScore(score, checkScore);\n      } else {\n        noMatch();\n      }\n    }\n  };\n\n  const preloadImages = () => {\n    cards.map((card) => {\n      const src = `./assets/images/${card.type}.png`;\n      new Image().src = src;\n    });\n  };\n  const noMatch = () => {\n    setTimeout(resetCards, 1200);\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n  const sameCardClicked = (id) => flipped.includes(id);\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id);\n    const flippedCard = cards.find((card) => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const checkScore = (score) => {\n    if (score > 7) {\n      setWins(wins + 1);\n      setTimeout(newGame, 1000);\n    }\n  };\n\n  const newGame = () => {\n    setSolution([]);\n    setCards(loadCards());\n    setScore(0);\n  };\n\n  function updateScore(score, callback) {\n    var newScore = score + 1;\n    setScore(score + 1);\n    callback(newScore);\n  }\n  return (\n    <div className='container'>\n      <h1 className='title'>\n        Memory Game -&nbsp;\n        <small className='score'>\n          [ score: {`${score}/${cards.length / 2}`}]\n        </small>\n      </h1>\n      <br />\n      <Board\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solution={solution}\n      />\n      <br />\n      <button\n        type='button'\n        className='mui-btn mui-btn--primary btn-restart'\n        onClick={() => newGame()}\n      >\n        Restart Game\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './v1/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}